stages:
   - build
   - publish

# docker:
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   script:
#     - docker login -u serpensin -p $DOCKER_PW
#     - docker buildx create --use --name chatbuilder
#     - sleep 2
#     - docker buildx build --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") --build-arg COMMIT=${CI_COMMIT_SHA} --compress --no-cache --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x -t serpensin/chatserver:latest --push ./Server
#   after_script:
#     - docker buildx rm chatbuilder
#     - sleep 10
#     - docker volume prune -f
#   timeout: 120m


# nuitka64-server:
#     stage: build
#     tags:
#       - windows64
#     script:
#       # Create venv
#       - python -m venv venv
#       - venv\Scripts\activate
#       - pip install nuitka
#       - pip install -r Server/requirements.txt
#       # Compile
#       - nuitka Server/Server.py --include-package=sentry_sdk --plugin-enable=tk-inter -o "Chat Server.exe" --remove-output --standalone --assume-yes-for-downloads --onefile --company-name="Serpent Modding" --product-name="Chat Server" --file-version=0.2.0 --file-description="A simple server for Serpent Modding's Chat Client" --windows-icon-from-ico=Server/static/icon.ico
#     artifacts:
#         paths:
#           - Chat Server.exe


nuitka32-server:
    stage: build
    tags:
        - windows32
    script:
        # Create venv
        - python -m venv venv
        - venv\Scripts\activate
        - pip install nuitka
        - pip install -r Server/requirements.txt
        # Compile
        - nuitka Server/Server.py --include-package=sentry_sdk --plugin-enable=tk-inter -o "Chat Server_32.exe" --remove-output --standalone --assume-yes-for-downloads --onefile --company-name="Serpent Modding" --product-name="Chat Server" --file-version=0.2.0 --file-description="A simple server for Serpent Modding's Chat Client" --windows-icon-from-ico=Server/static/icon.ico
    artifacts:
        paths:
          - Chat Server_32.exe


# nuitka64-client:
#     stage: build
#     tags:
#         - windows64
#     script:
#         # Create venv
#         - python -m venv venv
#         - venv\Scripts\activate
#         - pip install nuitka
#         - pip install -r Client/requirements.txt
#         # Compile
#         - nuitka Client/Client.py --include-package=sentry_sdk --plugin-enable=tk-inter -o "Chat Client.exe" --remove-output --standalone --assume-yes-for-downloads --onefile --company-name="Serpent Modding" --product-name="Chat Client" --file-version=0.2.0 --file-description="A simple client for Serpent Modding's Chat Server" --windows-icon-from-ico=Client/static/icon.ico
#     artifacts:
#       paths:
#         - Chat Client.exe


nuitka32-client:
    stage: build
    tags:
        - windows32
    script:
        # Create venv
        - python -m venv venv
        - venv\Scripts\activate
        - pip install nuitka
        - pip install -r Client/requirements.txt
        # Compile
        - nuitka Client/Client.py --include-package=sentry_sdk --plugin-enable=tk-inter -o "Chat Client_32.exe" --remove-output --standalone --assume-yes-for-downloads --onefile --company-name="Serpent Modding" --product-name="Chat Client" --file-version=0.2.0 --file-description="A simple client for Serpent Modding's Chat Server" --windows-icon-from-ico=Client/static/icon.ico
    artifacts:
        paths:
          - Chat Client_32.exe



github-release:
    stage: publish
    image: curlimages/curl
    services:
      - docker:dind
    needs:
        # - job: nuitka64-server
        #   artifacts: true
        - job: nuitka32-server
          artifacts: true
        # - job: nuitka64-client
        #   artifacts: true
        - job: nuitka32-client
          artifacts: true
    script:
    - |
      mkdir artifacts
      cp *.exe artifacts/

      RELEASE_NAME="v0.2.0-testname"
      RELEASE_TAG="v0.2.0-testrelease"

      git tag -a $RELEASE_TAG -m "Release $RELEASE_NAME"

      git push origin $RELEASE_TAG

      curl -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
          "tag_name": "'$RELEASE_TAG'",
          "name": "'$RELEASE_NAME'",
          "body": "This is an description example.",
          "draft": false,
          "prerelease": false
        }' \
        https://api.github.com/repos/Serpensin/SimpleChat/releases

      for file in $(ls artifacts); do
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/octet-stream" \
          --data-binary "@artifacts/$file" \
          https://uploads.github.com/repos/Serpensin/SimpleChat/releases/$RELEASE_TAG/assets?name=$file
      done





workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
